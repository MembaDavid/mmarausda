// Prisma Schema for SDA Church App (updated)
// Key changes applied from your notes:
// - Decimal money type for Offerings
// - PaymentMethod enum (normalized)
// - transactionId unique
// - added updatedAt + published to content models
// - graduationYear as Int
// - helpful indexes
// NOTE: Enforce Event.end > Event.start in application logic.
// Prisma Schema for SDA Church App (updated + back-relation for Sermon.preacherRef)
// Prisma Schema for SDA Church App (fixed to avoid touching `auth`)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")        // use ?schema=public
  directUrl  = env("DIRECT_DATABASE_URL")          // 5432, non-pooled; name can match your .env
  schemas    = ["public"]                 // âœ… remove "auth"
}

/* ========================= App Models (public) ========================= */

model User {
  id             String   @id @default(uuid()) @db.Uuid()

  // Link to Supabase Auth (store UUID only; no Prisma relation to `auth.users`)
  authUserId     String   @unique @db.Uuid()

  // App-specific fields
  role           Role     @default(GUEST)
  gender         Gender?
  homeChurch     String?

  // Relations
  memberProfile   MemberProfile?
  offerings       Offering[]
  events          Event[]         @relation("CreatedEvents")
  announcements   Announcement[]
  prayerRequests  PrayerRequest[]
  visitations     Visitation[]
  sermonsPreached Sermon[]        // back-rel for Sermon.preacherRef

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  @@index([authUserId])
  @@schema("public")
}

model MemberProfile {
  id               String           @id @default(uuid()) @db.Uuid()
  userId           String           @unique @db.Uuid()
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipStatus MembershipStatus @default(ACTIVE)
  address          String?
  dateOfBirth      DateTime?
  joinedAt         DateTime         @default(now())
  graduationYear   Int?
  baptismDate      DateTime?
  deletedAt        DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@schema("public")
}

model Event {
  id               String        @id @default(uuid()) @db.Uuid()
  title            String
  description      String
  category         EventCategory
  start            DateTime
  end              DateTime
  registrationLink String?
  published        Boolean       @default(true)

  createdById String? @db.Uuid()
  createdBy   User?   @relation("CreatedEvents", fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([start])
  @@index([createdAt])
  @@schema("public")
}

model Sermon {
  id          String   @id @default(uuid()) @db.Uuid()
  title       String
  preacher    String?  // free-text for guests
  preacherId  String?  @db.Uuid()
  preacherRef User?    @relation(fields: [preacherId], references: [id], onDelete: SetNull) // back-rel: User.sermonsPreached
  deliveredAt DateTime
  mediaUrl    String
  type        SermonType
  description String?
  published   Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deliveredAt])
  @@index([createdAt])
  @@schema("public")
}

model Announcement {
  id          String   @id @default(uuid()) @db.Uuid()
  title       String
  body        String
  published   Boolean  @default(true)
  createdById String?  @db.Uuid()
  createdBy   User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@schema("public")
}

model Offering {
  id            String           @id @default(uuid()) @db.Uuid()
  userId        String           @db.Uuid()
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      OfferingCategory
  amount        Decimal          @db.Decimal(12, 2)
  paymentMethod PaymentMethod
  transactionId String?          @unique
  date          DateTime         @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([date])
  @@schema("public")
}

model PrayerRequest {
  id        String       @id @default(uuid()) @db.Uuid()
  userId    String       @db.Uuid()
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  request   String
  status    PrayerStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([status])
  @@index([createdAt])
  @@schema("public")
}

model Visitation {
  id          String           @id @default(uuid()) @db.Uuid()
  userId      String           @db.Uuid()
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  purpose     String
  scheduledAt DateTime
  status      VisitationStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([scheduledAt])
  @@schema("public")
}

/* ========================= Enums ========================= */

enum Role {
  ADMIN
  EDITOR
  MEMBER
  GUEST
  ASSOCIATE
  TREASURER
  CLERK
  STAFF

  @@schema("public")
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  TRANSFERRED
  DECEASED

  @@schema("public")
}

enum Gender {
  MALE
  FEMALE

  @@schema("public")
}

enum EventCategory {
  SABBATH
  AMO
  ALO
  BIBLE_STUDY
  SOCIAL
  GENERAL

  @@schema("public")
}

enum SermonType {
  VIDEO
  AUDIO
  TEXT

  @@schema("public")
}

enum OfferingCategory {
  TITHE
  COMBINED_OFFERING
  CHURCH_BUDGET
  WELFARE
  MISSION
  OTHER

  @@schema("public")
}

enum PaymentMethod {
  MPESA
  CASH
  CARD
  BANK
  OTHER

  @@schema("public")
}

enum PrayerStatus {
  PENDING
  IN_PROGRESS
  ANSWERED

  @@schema("public")
}

enum VisitationStatus {
  PENDING
  COMPLETED
  CANCELLED

  @@schema("public")
}
